name: Sync Files

on:
  push:
    branches:
      - main
  schedule:
    - cron:  '19 10 * * 5' # Run every Friday at 10:19 UTC
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.4.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Run GitHub File Sync
        id: file_sync
        uses: BetaHuhn/repo-file-sync-action@v1
        with:
          GH_INSTALLATION_TOKEN: ${{ steps.generate_token.outputs.token }}
          GIT_EMAIL: 89714990+file-sync-app[bot]@users.noreply.github.com
          GIT_USERNAME: "file-sync-app[bot]"
          ORIGINAL_MESSAGE: true
          COMMIT_AS_PR_TITLE: true
          COMMIT_EACH_FILE: false
          ASSIGNEES: Nef10
          PR_LABELS: |
            sync
            maintenance
      - name: Enable automerge on PRs
        uses: actions/github-script@v5
        env:
          PRURLS: ${{ steps.file_sync.outputs.pull_request_urls }}
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            let failed = false;
            const { PRURLS } = process.env;
            const prs = JSON.parse(PRURLS);
            const idQuery = `query FindPullRequestId($owner: String!, $repoName: String!, $pullRequestNumber: Int!) {
              repository(owner: $owner, name: $repoName) {
                pullRequest(number: $pullRequestNumber) {
                  id
                }
              }
            }`;
            const mergeQuery = `mutation($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
              enablePullRequestAutoMerge(input: {
                pullRequestId: $pullRequestId,
                mergeMethod: $mergeMethod
              }) {
                clientMutationId
                pullRequest {
                  id
                  state
                }
              }
            }`;
            
            for (const pr of prs) {
              try {
                const urlParts = pr.replace('https://github.com/', '').split('/');
                const idVariables = {
                  owner: urlParts[0],
                  repoName: urlParts[1],
                  pullRequestNumber: parseInt(urlParts[3])
                };
                const idResult = await github.graphql(idQuery, idVariables);
                const mergeVariables = {
                  pullRequestId: idResult.repository.pullRequest.id,
                  mergeMethod: 'REBASE'
                };
                const mergeResult = await github.graphql(mergeQuery, mergeVariables);
                core.info(`Enabled automerge for ${pr}.`);
              } catch(err) {
                 core.error(`Error enabling automerge for ${pr}: ${err}`);
                 failed = true;
              }
            }
            if (failed) {
              core.setFailed('Automerging could not be enabled on some PRs!');
            }
